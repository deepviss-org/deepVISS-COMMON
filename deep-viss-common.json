{
  "openapi": "3.0.0",
  "info": {
    "description": "DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.",
    "version": "1.2.0",
    "title": "DeepVISS Common",
    "termsOfService": "https://deepviss.org",
    "contact": {
      "email": "office@deepviss.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "frame",
      "description": "Information about post-processed frames",
      "externalDocs": {
        "description": "Streaming API",
        "url": "https://deepviss.org"
      }
    },
    {
      "name": "analysis",
      "description": "End-points for image or image array analysis",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://deepviss.org"
      }
    }
  ],
  "paths": {
    "/status": {
      "get": {
        "tags": [
          "frame"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectiveOpinion"
                  }
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "operationId": "GetStatus",
        "summary": "Sample endpoint to avoid validation warning.",
        "description": "No functionality."
      }
    }
  },
  "components": {
    "schemas": {
      "Image": {
        "type": "object",
        "properties": {
          "imageURL": {
            "description": "The URL where the image is stored.",
            "type": "string"
          },
          "imageBase64": {
            "type": "string",
            "description": "Base64 encoded string of the image."
          },
          "imageContentType": {
            "type": "string",
            "description": "Image MIME-type, such as image/png or image/jpeg"
          }
        }
      },
      "BoundingRectangle": {
        "type": "object",
        "required": [
          "top",
          "left",
          "width",
          "height"
        ],
        "properties": {
          "top": {
            "description": "Top-most position, in pixels, of of the bounding rectangle",
            "type": "integer",
            "format": "int32",
            "example": 32
          },
          "left": {
            "description": "Left-most position, in pixels, of of the bounding rectangle",
            "type": "integer",
            "format": "int32",
            "example": 57
          },
          "width": {
            "description": "Width, in pixels, of the bounding rectangle",
            "type": "integer",
            "format": "int32",
            "example": 237
          },
          "height": {
            "description": "Height, in pixels, of the bounding rectangle",
            "type": "integer",
            "format": "int32",
            "example": 352
          }
        }
      },
      "GeoPosition": {
        "type": "object",
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "latitude": {
            "description": "The latitude at which the video source is installed.",
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "description": "The longitude at which the video source is installed.",
            "type": "number",
            "format": "double"
          },
          "altitude": {
            "description": "The altitude at which the video source is installed.",
            "type": "number",
            "format": "double"
          },
          "elevation": {
            "description": "The elevation from the ground at which the video source is installed, measured in meters.",
            "type": "number",
            "format": "double"
          }
        }
      },
      "KeypointsSegment": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Point2D",
            "type": "Point2D"
          }
        }
      },
      "Point2D": {
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "description": "X-coordinate as integer number of pixels measured from the left to the right.",
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "description": "Y-coordinate as integer number of pixels measured from the top to the bottom.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Point3D": {
        "type": "object",
        "required": [
          "x",
          "y",
          "z"
        ],
        "properties": {
          "x": {
            "description": "X-coordinate as integer number of pixels measured from the left to the right.",
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "description": "Y-coordinate as integer number of pixels measured from the top to the bottom.",
            "type": "integer",
            "format": "int32"
          },
          "z": {
            "description": "Z-coordinate as integer number of pixels measured from the top to the bottom.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Shape": {
        "type": "object",
        "discriminator": {
          "propertyName": "shapeType"
        },
        "required": [
          "shapeId",
          "shapeType"
        ],
        "properties": {
          "shapeId": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "shapeType": {
            "type": "string",
            "description": "descriminator",
            "example": "Shape2DReactangle"
          }
        }
      },
      "Shape2DRectangle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Shape"
          },
          {
            "type": "object",
            "properties": {
              "top": {
                "type": "integer",
                "format": "int32",
                "description": "Top coordinate of the tag, relative to media raster",
                "example": 145
              },
              "left": {
                "type": "integer",
                "format": "int32",
                "description": "Left coordinate of the tag, relative to media raster",
                "example": 182
              },
              "right": {
                "type": "integer",
                "format": "int32",
                "description": "Right coordinate of the tag, relative to media raster",
                "example": 295
              },
              "bottom": {
                "type": "integer",
                "format": "int32",
                "description": "Bottom coordinate of the tag, relative to media raster",
                "example": 244
              }
            }
          }
        ]
      },
      "Shape2DPolygon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Shape"
          },
          {
            "type": "object",
            "properties": {
              "points": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Point2D",
                  "type": "Point2D"
                }
              }
            }
          }
        ]
      },
      "Shape2DTimeboundPolygon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Shape"
          },
          {
            "type": "object",
            "properties": {
              "startFrameCounter": {
                "type": "integer",
                "format": "int32",
                "description": "Frame where the described tag begins"
              },
              "endFrameCounter": {
                "type": "integer",
                "format": "int32",
                "description": "Frame where the described tag begins"
              },
              "points": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Point2D",
                  "type": "Point2D"
                }
              }
            }
          }
        ]
      },
      "Shape2DRectangularTextBlock": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Shape2DRectangle"
          },
          {
            "type": "object",
            "properties": {
              "transliteration": {
                "type": "Transliteration",
                "$ref": "#/components/schemas/Transliteration",
                "description": "Frame where the described tag begins"
              },
              "style": {
                "type": "TextStyle",
                "$ref": "#/components/schemas/TextStyle",
                "description": "Recognized style of the writing, including font family, font type, size, color"
              }
            }
          }
        ]
      },
      "Style": {
        "type": "object",
        "description": "Recognized style of the writing, including font family, font type, size, color",
        "properties": {
          "font-style": {
            "type": "string",
            "description": "Character encoding type",
            "example": "serif",
            "enum": [
              "serif",
              "sans-serif",
              "handwritten",
              "collage"
            ]
          },
          "font-variant": {
            "type": "string",
            "description": "Character encoding type",
            "example": "serif",
            "enum": [
              "all-caps",
              "no-caps",
              "handwritten",
              "collage"
            ]
          },
          "font-size": {
            "type": "integer",
            "format": "int16",
            "description": "Size of font",
            "example": 12
          },
          "font-color": {
            "type": "string",
            "description": "Color in hex format ",
            "example": "#030F01"
          }
        }
      },
      "Transliteration": {
        "type": "object",
        "description": "Defines a segment of text associated to a Shape, together with many possibilities for each ",
        "properties": {
          "encoding": {
            "type": "string",
            "description": "Character encoding type",
            "example": "UTF-8",
            "enum": [
              "ISO-646-ASCII",
              "UTF-8"
            ]
          },
          "charset": {
            "type": "string",
            "description": "The set of characters allowed , alphabet",
            "example": "latin1",
            "enum": [
              "latin1",
              "latin2",
              "cp1251",
              "greek",
              "hebrew"
            ]
          },
          "direction": {
            "type": "string",
            "description": "reading direction",
            "example": "left-to-right",
            "enum": [
              "left-to-right",
              "right-to-left",
              "top-to-bottom",
              "bottom-to-top"
            ]
          },
          "collation-language": {
            "type": "string",
            "description": "collation use for comparing and sorting the characters, as per Unicode Sorting Algorithm",
            "example": "utf8_romanian_ci",
            "enum": [
              "utf8_romanian_ci",
              "latin2_general_ci",
              "cp1250_general_ci",
              "greek_general_ci",
              "hebrew_general_ci"
            ]
          },
          "characterSequence": {
            "description": "The order of the characters, according to the direction of the transliteration",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservableCharacter",
              "type": "ObservableCharacter"
            }
          }
        }
      },
      "ObservableCharacter": {
        "type": "object",
        "description": "The object which described several possible values for a an observed character.",
        "properties": {
          "superposedCharacter": {
            "description": "The segments (sub-keys) that compose the permanent identifier.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservedCharacter",
              "type": "ObservedCharacter"
            }
          }
        }
      },
      "ObservedCharacter": {
        "type": "object",
        "description": "The object which described several possible values for a an observed character.",
        "properties": {
          "value": {
            "type": "string"
          },
          "subjectiveOpinion": {
            "$ref": "#/components/schemas/InternalSubjectiveOpinion",
            "type": "InternalSubjectiveOpinion"
          }
        }
      },
      "InternalSubjectiveOpinion": {
        "description": "Three independent counters corresponding to belief, disbelief and uncertainty. mediated by a common denominator and multiplied by a base rate (probability in the absence of this information).",
        "type": "object",
        "properties": {
          "opinionEmitterId": {
            "type": "string",
            "description": "Functional source, if any, for this opinion, such a specific condition ",
            "example": "ocr"
          },
          "opinionReasonId": {
            "type": "string",
            "description": "Reason evoked, invoked or inferred by source for this opinion.",
            "example": "unreadable"
          },
          "attributedBeliefNumerator": {
            "format": "int32",
            "description": "Number, signed and additive, of fulfillment points out of total that are attributed to belief that the opinion is TRUE. belief mass (bx) numerator accumulator.",
            "type": "integer",
            "example": 5
          },
          "attributedDisbeliefNumerator": {
            "format": "int32",
            "description": "Number, signed and additive, of fulfillment points out of total that are attributed to belief that the opinion is FALSE. belief mass (dx) numerator accumulator",
            "type": "integer",
            "example": 2
          },
          "unattributedUncertaintyNumerator": {
            "format": "int32",
            "description": "Number, signed and additive, of fulfillment points out of total that are unattributed to either belief or disbelief and thus represent uncertainty. uncertainty mass (ux) numerator accumulator.",
            "type": "integer",
            "example": 1
          },
          "commonDenominator": {
            "format": "int32",
            "description": "The normalizing factor (the common denominator) of uncertainty, belief and disbelief.",
            "type": "integer",
            "example": 1
          },
          "baseRateNumerator": {
            "format": "int32",
            "description": "The probability of the opinion being true in the absence of the information generating it; this represents the default probability of a an element or character or letter appearing in a specific context",
            "type": "integer",
            "example": 1
          }
        }
      },
      "SubjectiveOpinion": {
        "description": "The reduced or collapsed version of InternalSubjectiveOpinion, with all beliefs and disbeliefs reduced per reason,emitter pair. ",
        "type": "object",
        "properties": {
          "opinionEmitterId": {
            "type": "string",
            "description": "Functional source, if any, for this opinion, such a specific condition or internal state encoutered. May be empty.",
            "example": "ocr"
          },
          "opinionReasonId": {
            "type": "string",
            "description": "Reason evoked, invoked or inferred by source for this opinion. May be empty.",
            "example": "unreadable"
          },
          "belief": {
            "format": "double",
            "description": "attributed to belief that the opinion is TRUE. belief mass (bx) normalized.",
            "type": "number",
            "example": 0.75
          },
          "disbelief": {
            "format": "double",
            "description": "attributed to belief that the opinion is FALSE. disbelief mass (dx)  normalized",
            "type": "number",
            "example": 0.2
          },
          "uncertainty": {
            "format": "double",
            "description": "unattributed to either belief or disbelief and thus represent uncertainty. uncertainty mass (ux) normalized.",
            "type": "number",
            "example": 0.1
          },
          "baseRateProbability": {
            "format": "double",
            "description": "The probability of the opinion being true in the absence of the information generating it.",
            "type": "number",
            "example": 0.001
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about DeepVISS",
    "url": "https://deepviss.org"
  }
}